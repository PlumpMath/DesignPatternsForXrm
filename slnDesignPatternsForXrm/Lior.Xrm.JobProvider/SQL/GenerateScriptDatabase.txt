USE [JobManager]
GO

/****** Object:  Table [dbo].[Records]    Script Date: 12/02/2015 10:24:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Records](
	[ID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ModelXml] [xml] NULL,
	[StatusId] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[JobId] [uniqueidentifier] NULL,
	[Retry] [int] NULL,
	[ModelType] [nvarchar](100) NULL,
	[Action] [nvarchar](500) NULL
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[Records] ADD  CONSTRAINT [DF_Records_ID]  DEFAULT (newid()) FOR [ID]
GO

USE [JobManager]
GO

/****** Object:  Table [dbo].[Jobs]    Script Date: 12/02/2015 10:24:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Jobs](
	[JobId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[JobName] [nvarchar](50) NULL,
	[MaxRetries] [int] NULL
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[Jobs] ADD  CONSTRAINT [DF_Jobs_JobId]  DEFAULT (newid()) FOR [JobId]
GO


USE [JobManager]
GO

/****** Object:  Table [dbo].[JobStatus]    Script Date: 12/02/2015 10:24:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[JobStatus](
	[StatusId] [int] NOT NULL,
	[StatusName] [nvarchar](50) NULL
) ON [PRIMARY]

GO

USE [JobManager]
GO

/****** Object:  Table [dbo].[JobHistory]    Script Date: 12/02/2015 10:25:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[JobHistory](
	[HistoryId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[StartedAt] [datetime] NULL,
	[EndedAt] [datetime] NULL,
	[TotalRecords] [int] NULL,
	[Failed] [int] NULL,
	[JobId] [uniqueidentifier] NULL,
	[status] [int] NULL,
	[Inserted] [int] NULL,
	[Updated] [int] NULL,
	[NoUpdated] [int] NULL,
	[Succeeded] [int] NULL
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[JobHistory] ADD  CONSTRAINT [DF_JobHistory_HistoryId]  DEFAULT (newid()) FOR [HistoryId]
GO


USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_getFaildRecords]    Script Date: 12/02/2015 10:26:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================


CREATE PROCEDURE [dbo].[GS_getFaildRecords]
	@JobId uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  R.ID,
			R.ModelXml,
			R.StatusId,
			R.CreatedOn,
			R.ModifiedOn,
			R.Retry,
			R.JobId,
			R.ModelType
			into #t
	FROM dbo.Records R
	INNER JOIN dbo.Jobs J
		ON R.JobId=J.JobId
	WHERE R.JobId = @JobId 
	AND R.Retry = J.MaxRetries 
	AND R.StatusId = 4 --Failed
	
	update RD 
	SET RD.Retry=#t.Retry+1
	FROM dbo.Records RD
	inner join #t
	on #t.ID=RD.ID
	
	
	select * from #t
	
END

GO
USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_GetJobIdByJobName]    Script Date: 12/02/2015 10:26:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GS_GetJobIdByJobName]
	-- Add the parameters for the stored procedure here
	@jobName nvarchar(100)
AS
BEGIN
SELECT top 1 [JobId]
  FROM [JobManager].[dbo].[Jobs]
where [JobName]=@jobName



END

GO
USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_GetJobIdByName]    Script Date: 12/02/2015 10:26:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- exec GS_InsertRecordJob @jobName='XX1',@MaxRetries=45,@ModelXml='<root></root>',@ModelTypeXml='t'
-- EXEC GS_GetJobIdByName 'XX'
CREATE PROCEDURE [dbo].[GS_GetJobIdByName]
	@jobName nvarchar(300),@MaxRetries int=10
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @JobId uniqueidentifier;
	EXEC GS_JobAddIfNotExist @JobId=@JobId output,@MaxRetries=@MaxRetries ,@jobName= @jobName;
	
END

GO
USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_GetLastJobDate]    Script Date: 12/02/2015 10:26:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- exec  [dbo].[GS_GetLastJobDate] 'SurveyInterface1.0.0.0'
CREATE PROCEDURE [dbo].[GS_GetLastJobDate]
	@JobName nvarchar(50)
AS
BEGIN
	SET NOCOUNT ON;

    SELECT TOP 1 StartedAt
    FROM dbo.JobHistory H
    INNER JOIN dbo.Jobs J
		ON H.JobId = J.JobId
    WHERE J.JobName = @JobName
    ORDER BY H.StartedAt desc
END

GO
USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_getRecordsByJobId]    Script Date: 12/02/2015 10:26:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

--exec [dbo].[GS_getRecordsByJobId] 'de9a6f4e-695d-41fa-bae7-d4965a49c380'
CREATE PROCEDURE [dbo].[GS_getRecordsByJobId]
	@JobId uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;
	SELECT  R.ID,
			R.ModelXml,
			R.StatusId,
			R.CreatedOn,
			R.ModifiedOn,
			R.Retry,
			R.JobId,
			R.ModelType
	FROM dbo.Records R
	INNER JOIN dbo.Jobs J
		ON R.JobId=J.JobId
	WHERE R.JobId = @JobId AND 
	R.Retry < J.MaxRetries 
	AND (R.StatusId = 0 or R.StatusId = 4)

 
END

GO
USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_InsertJobHistory]    Script Date: 12/02/2015 10:27:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[GS_InsertJobHistory]
@jobid uniqueidentifier
as
begin
declare @op table
(
    ColGuid uniqueidentifier
)

INSERT INTO dbo.JobHistory
           (StartedAt
           ,JobId)
   OUTPUT INSERTED.HistoryId  into @op
     VALUES
           (getdate()
           ,@jobid)


select o.ColGuid from @op o

end

GO
USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_InsertRecordJob]    Script Date: 12/02/2015 10:27:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- exec GS_InsertRecordJob @jobName='XX1',@MaxRetries=45,@ModelXml='<root></root>',@ModelTypeXml='t'
-- EXEC GS_JobAddIfNotExist 'XX'
CREATE PROCEDURE [dbo].[GS_InsertRecordJob]
	@jobName nvarchar(300),@MaxRetries int=10,@Id uniqueidentifier=null, @ModelXml xml='',@StatusId int=0,@ModelTypeXml nvarchar(500)='',@Retry int =0
AS
BEGIN
	
	SET NOCOUNT ON;
	declare @JobId uniqueidentifier;
	exec GS_JobAddIfNotExist @JobId =@JobId output,@MaxRetries=@MaxRetries ,@jobName= @jobName;
	if(@Id is null)
	begin
	INSERT INTO dbo.Records
		(ModelXml, StatusId, CreatedOn, ModifiedOn, Retry, JobId, ModelType)
     VALUES
           (@ModelXml ,@StatusId,GETDATE() ,GETDATE()  ,@Retry  ,@JobId  ,@ModelTypeXml)
   end

END

GO
USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_JobAddIfNotExist]    Script Date: 12/02/2015 10:27:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- declare @JobId uniqueidentifier;exec GS_JobAddIfNotExist @JobId =@JobId output,@MaxRetries=56 ,@jobName= 'sggx'; 
CREATE PROCEDURE [dbo].[GS_JobAddIfNotExist]
	-- Add the parameters for the stored procedure here
	 @JobId  uniqueidentifier output,@jobName nvarchar(300),@MaxRetries int =null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--declare @JobId uniqueidentifier;
	DECLARE @MaxRetriesTemp int 
	SELECT @JobId=[JobId] ,@MaxRetriesTemp=[MaxRetries]
	FROM [dbo].[Jobs]
	WHERE [JobName]=@jobName

declare @op table
(
    ColGuid uniqueidentifier
)

  if(@JobId is null)
  BEGIN
   if (@MaxRetries is not null)
     set @MaxRetriesTemp=@MaxRetries;
   else
     set @MaxRetriesTemp=10;

	INSERT INTO [dbo].[Jobs]		([JobName] ,[MaxRetries])	
	OUTPUT INSERTED.JobId  into @op
	VALUES  (@jobName ,@MaxRetriesTemp)
	
	SELECT @JobId= o.ColGuid from @op o
    SET @MaxRetries=@MaxRetriesTemp;
  END
  ELSE
  BEGIN  
  if (@MaxRetries is not null)
  BEGIN
	  UPDATE [dbo].[Jobs]
		SET [MaxRetries] = @MaxRetries
		WHERE [JobId]=@JobId
  END	  
  ELSE 
	BEGIN 
	 SET @MaxRetries=@MaxRetriesTemp;
	END 
  END
  SELECT @JobId,@MaxRetries
END

GO

USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_UpdateJobHistory]    Script Date: 12/02/2015 10:27:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[GS_UpdateJobHistory]
@id uniqueidentifier
,@total int=null, @noupdate int=null,
@update int=null,@insert int=null,
@success int=null,
@failed int=null
AS

BEGIN
DECLARE @op TABLE
(
    ColGuid uniqueidentifier
)

UPDATE dbo.JobHistory
   SET EndedAt = getdate()
      ,TotalRecords = isnull(@total,TotalRecords)
      ,NoUpdated =  isnull(@noupdate,NoUpdated)
      ,Updated =  isnull(@update,Updated)
      ,Inserted = isnull(@insert,Inserted)
      ,Succeeded = isnull(@success,Succeeded)
      ,Failed = isnull(@failed,Failed)
      ,[Status] = 2
 WHERE HistoryId = @id

END

GO

USE [JobManager]
GO

/****** Object:  StoredProcedure [dbo].[GS_UpdateRecord]    Script Date: 12/02/2015 10:27:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GS_UpdateRecord]
	-- Add the parameters for the stored procedure here
@status int,@recordid uniqueidentifier, @retry int=null
,@action nvarchar(200)=null, @ModelXml xml=null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	UPDATE [dbo].[Records]
    SET [StatusId] =@status
	  ,[ModifiedOn] = getdate()
	  ,[Retry] = ISNULL(@retry,[Retry]) 
	  ,[Action] = ISNULL(@action,[Action])
	  ,[modelxml]= ISNULL(@ModelXml,[modelxml])
	WHERE [ID] = @recordid

END

GO








